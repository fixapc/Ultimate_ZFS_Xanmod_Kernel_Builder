# ocamldoc
# Autogenerated from man page /usr/share/man/man1/ocamldoc.1.gz
complete -c ocamldoc -o html -d 'Generate documentation in HTML default format'
complete -c ocamldoc -o latex -d 'Generate documentation in LaTeX default format'
complete -c ocamldoc -o texi -d 'Generate documentation in TeXinfo default format'
complete -c ocamldoc -o man -d 'Generate documentation as a set of Unix man pages'
complete -c ocamldoc -o dot -d 'Generate a dependency graph for the toplevel modules, in a format suitable fo…'
complete -c ocamldoc -s g -d 'Dynamically load the given file (which extension usually is . cmo or '
complete -c ocamldoc -o customdir -d 'Display the custom generators default directory'
complete -c ocamldoc -s i -d 'Add the given directory to the path where to look for custom generators'
complete -c ocamldoc -s d -d 'Generate files in directory R dir , rather than the current directory'
complete -c ocamldoc -o dump -d 'Dump collected information into R file '
complete -c ocamldoc -o hide -d 'Hide the given complete module names in the generated documentation'
complete -c ocamldoc -o inv-merge-ml-mli -d 'Reverse the precedence of implementations and interfaces when merging'
complete -c ocamldoc -o keep-code -d 'Always keep the source code for values, methods and instance variables, when …'
complete -c ocamldoc -o load -d 'Load information from R file , which has been produced by  ocamldoc-dump '
complete -c ocamldoc -s m -d 'Specify merge options between interfaces and implementations'
complete -c ocamldoc -o no-custom-tags -d 'Do not allow custom @-tags'
complete -c ocamldoc -o no-stop -d 'Keep elements placed after the  (**/**) special comment'
complete -c ocamldoc -s o -d 'Output the generated documentation to  file instead of R ocamldoc. out '
complete -c ocamldoc -o open -d 'Opens  module before typing'
complete -c ocamldoc -o pp -d 'Pipe sources through preprocessor R command '
complete -c ocamldoc -o ppx -d 'Pipe abstract syntax tree through preprocessor R command '
complete -c ocamldoc -o show-missed-crossref -d 'Show missed cross-reference opportunities'
complete -c ocamldoc -o sort -d 'Sort the list of top-level modules before generating the documentation'
complete -c ocamldoc -o stars -d 'Remove blank characters until the first asterisk (\'*\') in each line of commen…'
complete -c ocamldoc -s t -d 'Use  title as the title for the generated documentation'
complete -c ocamldoc -o text -d 'Consider file as a . txt file'
complete -c ocamldoc -o intro -d 'Use content of  file as  ocamldoc text to use as introduction (HTML, LaTeX an…'
complete -c ocamldoc -s v -d 'Verbose mode.  Display progress information'
complete -c ocamldoc -o version -d 'Print version string and exit'
complete -c ocamldoc -o vnum -d 'Print short version number and exit'
complete -c ocamldoc -o warn-error -d 'Treat  ocamldoc warnings as errors'
complete -c ocamldoc -o hide-warnings -d 'Do not print  ocamldoc warnings'
complete -c ocamldoc -o help -l help -d 'Display a short usage summary and exit'
complete -c ocamldoc -s I -d 'Add  directory to the list of directories search for compiled interface files…'
complete -c ocamldoc -o nolabels -d 'Ignore non-optional labels in types'
complete -c ocamldoc -o rectypes -d 'Allow arbitrary recursive types.  (See the  -rectypes option to  ocamlc (1)'
complete -c ocamldoc -o all-params -d 'Display the complete list of parameters for functions and methods'
complete -c ocamldoc -o charset -d 'Add information about character encoding being s (default is iso-8859-1)'
complete -c ocamldoc -o css-style -d 'Use  filename as the Cascading Style Sheet file'
complete -c ocamldoc -o colorize-code -d 'Colorize the OCaml code enclosed in [ ] and \\\\{[ ]\\\\}, using colors to emphas…'
complete -c ocamldoc -o index-only -d 'Generate only index files'
complete -c ocamldoc -o short-functors -d 'Use a short form to display functors:  "module M : functor (A:Module) -> func…'
complete -c ocamldoc -o latex-value-prefix -d 'Give a prefix to use for the labels of the values in the generated LaTeX docu…'
complete -c ocamldoc -o latextitle -d 'Associate style number  n to the given LaTeX sectioning command R style , e'
complete -c ocamldoc -o noheader -d 'Suppress header in generated documentation'
complete -c ocamldoc -o notoc -d 'Do not generate a table of contents'
complete -c ocamldoc -o notrailer -d 'Suppress trailer in generated documentation'
complete -c ocamldoc -o sepfiles -d 'Generate one . tex file per toplevel module, instead of the global  ocamldoc'
complete -c ocamldoc -o esc8 -d 'Escape accented characters in Info files'
complete -c ocamldoc -o info-entry -d 'Specify Info directory entry'
complete -c ocamldoc -o info-section -d 'Specify section of Info directory'
complete -c ocamldoc -o noindex -d 'Do not build index for Info files'
complete -c ocamldoc -o dot-colors -d 'Specify the colors to use in the generated dot code'
complete -c ocamldoc -o dot-include-all -d 'Include all modules in the  dot (1) output, not only modules given on the com…'
complete -c ocamldoc -o dot-reduce -d 'Perform a transitive reduction of the dependency graph before outputting the …'
complete -c ocamldoc -o dot-types -d 'Output dot code describing the type dependency graph instead of the module de…'
complete -c ocamldoc -o man-mini -d 'Generate man pages only for modules, module types, classes and class types, i…'
complete -c ocamldoc -o man-suffix -d 'Set the suffix used for generated man filenames.  Default is o, as in R List'
complete -c ocamldoc -o latex-type-prefix
complete -c ocamldoc -o latex-exception-prefix
complete -c ocamldoc -o latex-module-prefix
complete -c ocamldoc -o latex-module-type-prefix
complete -c ocamldoc -o latex-class-prefix
complete -c ocamldoc -o latex-class-type-prefix
complete -c ocamldoc -o latex-attribute-prefix
complete -c ocamldoc -o latex-method-prefix
complete -c ocamldoc -o man-section -d 'Set the section number used for generated man filenames.  Default is 3'

