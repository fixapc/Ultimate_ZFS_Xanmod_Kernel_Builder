# nyc
# Autogenerated from man page /usr/share/man/man1/nyc.1.gz
complete -c nyc -l cwd -d 'working directory used when resolving paths [string] [default: ". "]'
complete -c nyc -l nycrc-path -d 'specify an explicit path to find nyc configuration'
complete -c nyc -s t -l temp-dir -d 'directory to output raw coverage information to         [string] [default: "'
complete -c nyc -s x -l exclude -d 'a list of specific files and directories that should be excluded from coverag…'
complete -c nyc -s '*' -d 'js,cjs,mjs,ts,tsx,jsx}","**/*{. ,-}test'
complete -c nyc -l exclude-node-modules -d 'whether or not to exclude all node_module folders (i. e'
complete -c nyc -s n -l include -d 'a list of specific files that should be covered, glob patterns are supported'
complete -c nyc -s e -l extension -d 'a list of extensions that nyc should handle in addition to . js'
complete -c nyc -l ignore-class-methods -d 'class method names to ignore for coverage [string] [default: []]'
complete -c nyc -l auto-wrap -d 'allow `return` statements outside of functions [boolean] [default: true]'
complete -c nyc -l es-modules -d 'should files be treated as ES Modules [boolean] [default: true]'
complete -c nyc -l parser-plugins -d 'babel parser plugins to use when parsing the source'
complete -c nyc -l compact -d 'should the output be compacted? [boolean] [default: true]'
complete -c nyc -l preserve-comments -d 'should comments be preserved in the output? [boolean] [default: true]'
complete -c nyc -l produce-source-map -d 'should source maps be produced? [boolean] [default: true]'
complete -c nyc -l source-map -d 'should nyc detect and handle source maps? [boolean] [default: true]'
complete -c nyc -s i -l require -d 'a list of additional modules that nyc should attempt to require in its subpro…'
complete -c nyc -l instrument -d 'should nyc handle instrumentation? [boolean] [default: true]'
complete -c nyc -l exclude-after-remap -d 'should exclude logic be performed after the source-map remaps filenames?'
complete -c nyc -l branches -d 'what % of branches must be covered? [number] [default: 0]'
complete -c nyc -l functions -d 'what % of functions must be covered? [number] [default: 0]'
complete -c nyc -l lines -d 'what % of lines must be covered? [number] [default: 90]'
complete -c nyc -l statements -d 'what % of statements must be covered? [number] [default: 0]'
complete -c nyc -l per-file -d 'check thresholds per file [boolean] [default: false]'
complete -c nyc -l check-coverage -d 'check whether coverage is within thresholds provided            [boolean] [de…'
complete -c nyc -s r -l reporter -d 'coverage reporter(s) to use [string] [default: ["text"]]'
complete -c nyc -l report-dir -d 'directory to output coverage reports in [string] [default: "coverage"]'
complete -c nyc -l show-process-tree -d 'display the tree of spawned processes [boolean] [default: false]'
complete -c nyc -l skip-empty -d 'don\'t show empty files (no lines of code) in report              [boolean] [d…'
complete -c nyc -l skip-full -d 'don\'t show files with 100% statement, branch, and function coverage'
complete -c nyc -s s -l silent -d 'don\'t output a report after tests finish running             [boolean] [defau…'
complete -c nyc -s a -l all -d 'whether or not to instrument all files of the project (not just the ones touc…'
complete -c nyc -l eager -d 'instantiate the instrumenter at startup (see https://git. io/vMKZ9)'
complete -c nyc -s c -l cache -d 'cache instrumentation results for improved performance          [boolean] [de…'
complete -c nyc -l cache-dir -d 'explicitly set location for instrumentation cache                            …'
complete -c nyc -l babel-cache -d 'cache babel transpilation results for improved performance         [boolean] …'
complete -c nyc -l use-spawn-wrap -d 'use spawn-wrap instead of setting process. env. NODE_OPTIONS'
complete -c nyc -l hook-require -d 'should nyc wrap require? [boolean] [default: true]'
complete -c nyc -l hook-run-in-context -d 'should nyc wrap vm. runInContext? [boolean] [default: false]'
complete -c nyc -l hook-run-in-this-context -d 'should nyc wrap vm. runInThisContext? [boolean] [default: false]'
complete -c nyc -l clean -d 'should the . nyc_output folder be cleaned before executing tests'
complete -c nyc -s h -l help -d 'Show help                            [boolean]'
complete -c nyc -l version -d 'Show version number                  [boolean] EXAMPLES'

