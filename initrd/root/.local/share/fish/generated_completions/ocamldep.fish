# ocamldep
# Autogenerated from man page /usr/share/man/man1/ocamldep.1.gz
complete -c ocamldep -o absname -d 'Show absolute filenames in error messages'
complete -c ocamldep -o all -d 'Generate dependencies on all required files, rather than assuming implicit de…'
complete -c ocamldep -o allow-approx -d 'Allow falling back on a lexer-based approximation when parsing fails'
complete -c ocamldep -o as-map -d 'For the following files, do not include delayed dependencies for module alias…'
complete -c ocamldep -o debug-map -d 'Dump the delayed dependency map for each map file'
complete -c ocamldep -s I -d 'Add the given directory to the list of directories searched for source files'
complete -c ocamldep -o nocwd -d 'Do not add current working directory to the list of include directories'
complete -c ocamldep -o impl -d 'Process R file as a . ml file'
complete -c ocamldep -o intf -d 'Process R file as a . mli file'
complete -c ocamldep -o map -d 'Read an propagate the delayed dependencies for module aliases in R file , so …'
complete -c ocamldep -o ml-synonym -d 'Consider the given extension (with leading dot) to be a synonym for . ml'
complete -c ocamldep -o mli-synonym -d 'Consider the given extension (with leading dot) to be a synonym for . mli'
complete -c ocamldep -o modules -d 'Output raw dependencies of the form R filename : Module1Module2 '
complete -c ocamldep -o native -d 'Generate dependencies for a pure native-code program (no bytecode version)'
complete -c ocamldep -o one-line -d 'Output one line per file, regardless of the length'
complete -c ocamldep -o open -d 'Assume that module R module is opened before parsing each of the following fi…'
complete -c ocamldep -o pp -d 'Cause  ocamldep (1) to call the given  command as a preprocessor for each sou…'
complete -c ocamldep -o ppx -d 'Pipe abstract syntax tree through preprocessor R command '
complete -c ocamldep -o shared -d 'Generate dependencies for native plugin files ('
complete -c ocamldep -o slash -d 'Under Unix, this option does nothing'
complete -c ocamldep -o sort -d 'Sort files according to their dependencies'
complete -c ocamldep -o version -d 'Print version string and exit'
complete -c ocamldep -o vnum -d 'Print short version number and exit'
complete -c ocamldep -o help -l help -d 'Display a short usage summary and exit'

