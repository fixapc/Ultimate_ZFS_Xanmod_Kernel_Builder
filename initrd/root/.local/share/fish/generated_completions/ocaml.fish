# ocaml
# Autogenerated from man page /usr/share/man/man1/ocaml.1.gz
complete -c ocaml -o absname -d 'Show absolute filenames in error messages'
complete -c ocaml -s I -d 'Add the given directory to the list of directories searched for source and co…'
complete -c ocaml -o init -d 'Load the given file instead of the default initialization file'
complete -c ocaml -o labels -d 'Labels are not ignored in types, labels may be used in applications, and labe…'
complete -c ocaml -o no-app-funct -d 'Deactivates the applicative behaviour of functors'
complete -c ocaml -o noassert -d 'Do not compile assertion checks'
complete -c ocaml -o noinit -d 'Do not load any initialization file'
complete -c ocaml -o nolabels -d 'Ignore non-optional labels in types'
complete -c ocaml -o noprompt -d 'Do not display any prompt when waiting for input'
complete -c ocaml -o nopromptcont -d 'Do not display the secondary prompt when waiting for continuation lines in mu…'
complete -c ocaml -o nostdlib -d 'Do not include the standard library directory in the list of directories sear…'
complete -c ocaml -o open -d 'Opens the given module before starting the toplevel'
complete -c ocaml -o ppx -d 'After parsing, pipe the abstract syntax tree through the preprocessor R comma…'
complete -c ocaml -o principal -d 'Check information path during type-checking, to make sure that all types are …'
complete -c ocaml -o rectypes -d 'Allow arbitrary recursive types during type-checking'
complete -c ocaml -o safe-string -d 'Enforce the separation between types  string and bytes , thereby making strin…'
complete -c ocaml -o short-paths -d 'When a type is visible under several module-paths, use the shortest one when …'
complete -c ocaml -o stdin -d 'Read the standard input as a script file rather than starting an interactive …'
complete -c ocaml -o strict-sequence -d 'Force the left-hand part of each sequence to have type unit'
complete -c ocaml -o unboxed-types -d 'When a type is unboxable (i. e'
complete -c ocaml -o no-unboxed-types -d 'When a type is unboxable  it will be boxed unless annotated with  [@@ocaml'
complete -c ocaml -o unsafe -d 'Turn bound checking off on array and string accesses (the  v. (i) and s'
complete -c ocaml -o unsafe-string -d 'Identify the types  string and bytes , thereby making strings writable'
complete -c ocaml -o version -d 'Print version string and exit'
complete -c ocaml -o vnum -d 'Print short version number and exit'
complete -c ocaml -o no-version -d 'Do not print the version banner at startup'
complete -c ocaml -s w -d 'Enable or disable warnings according to the argument R warning-list '
complete -c ocaml -o warn-error -d 'Mark as fatal the warnings described by the argument R warning-list '
complete -c ocaml -o color -d 'Enable or disable colors in compiler messages (especially warnings and errors)'
complete -c ocaml -o error-style -d 'Control the way error messages and warnings are printed'
complete -c ocaml -o warn-help -d 'Show the description of all available warning numbers'
complete -c ocaml -o help -l help -d 'Display a short usage summary and exit'

